# Author: MiÅ‚osz Gilga
# Github: https://github.com/Milosz08
# Silesian University of Technology, April 2021

# Check if binary string is palindrome.
# If is palindrome, goto state 'qA', if isn't, goto state 'qNa'.

### Initial Input: $11100100110001011011010001100100111$

q0 0 _ > q1o          # for symbol '0', replace with blank and go right to 'q1o'
q0 1 _ > q1i          # for symbol '1', replace with blank and go right to 'q1i'
q0 _ _ * qA           # for empty input, replace and goto 'qA'

qA * * * stop-qA      # string is palindrome
qNa * * * stop-qNa    # strings isn't palindrome

q1o _ _ < q2o         # goto rightmost '0' symbol (at end of the tape, before blank)
q1o * * > q1o         # if not find, do recursion

q1i _ _ < q2i         # goto rightmost '1' symbol (at end of the tape, before blank)
q1i * * > q1i         # if not find, do recursion

q2o 0 _ < q3          # check if the rightmost '0' symbol match to read the leftmost symbol
q2o _ _ * qA          # if true, string is palidrome, goto 'qA'
q2o * * * qNa         # if true, string is palidrome, goto 'qNa'

q2i 1 _ < q3          # check if the rightmost '1' symbol match to read the leftmost symbol
q2i _ _ * qA          # if true, string is palidrome, goto 'qA'
q2i * * * qNa         # if true, string is palidrome, goto 'qNa'

q3 _ _ * qA           # goto 'qA' state and replace current symbol to blank
q3 * * < q4           # for non-blank symbol, goto left and 'q4'
q4 _ _ > q0           # if current symbol is blank, back to the beginning
q4 * * < q4           # if not, do recursion from right to left
